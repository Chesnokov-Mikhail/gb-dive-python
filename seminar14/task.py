# üìå –ù–∞ —Å–µ–º–∏–Ω–∞—Ä–µ 13 –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–∏–º—è, id, —É—Ä–æ–≤–µ–Ω—å)
# üìå –ù–∞–ø–∏—à–∏—Ç–µ 3-7 —Ç–µ—Å—Ç–æ–≤ pytest (–∏–ª–∏ unittest –Ω–∞ –≤–∞—à –≤—ã–±–æ—Ä) –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
# üìå –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã

import json
from pathlib import Path

# –ø—É—Ç—å –∫ –±–∞–∑–µ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
PATH_DB = "user_db.json"
MIN_LEVEL = 1
MAX_LEVEL = 7

class AccesError(Exception):
    def __init__(self, msg: str):
        self.message = msg

    def __str__(self):
        return f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫: {self.message}"

class User:
    def __init__(self, name:str, id:int, level:int=MIN_LEVEL):
        try:
            self._validate(name, id, level)
            self.name = name
            self.id = id
            self.level = level
        except ValueError as e:
            print(e)

    def __str__(self):
        return f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {self.id}, –ò–º—è: {self.name}, –£—Ä–æ–≤–µ–Ω—å: {self.level}"

    def __repr__(self):
        return f"User(name={self.name}, id={self.id}, level={self.level})"

    def __eq__(self, other):
        if isinstance(other,User):
            return all(((self.id == other.id), (self.name == other.name)))
        raise TypeError(f"–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –∫–ª–∞—Å—Å–∞ {User.__name__}")

    def __lt__(self, other):
        if isinstance(other,User):
            return (self.level < other.level)
        raise TypeError(f"–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –∫–ª–∞—Å—Å–∞ {User.__name__}")

    def _validate(self, name:str, id:int, level:int=MIN_LEVEL):
        if not name or not name.isalpha():
            raise ValueError('–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–∞')
        if not (MIN_LEVEL <= level <= MAX_LEVEL):
            raise ValueError(f"–≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –æ—Ç {MIN_LEVEL} –¥–æ {MAX_LEVEL}")
        return True

    def add_user_db(self):
        users_id = set()
        data = load_db()
        for user in data.values():
            users_id.update(map(int, user.keys()))
        if self.id in users_id:
            raise ValueError("–¢–∞–∫–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π.")
def load_db() -> dict:
    path = Path(PATH_DB)
    if path.exists() and path.is_file():
        with path.open("r", encoding="UTF-8") as f:
            data = json.load(f)
    else:
        data = dict()
    return data

def save_db(my_dict: dict) -> bool:
    path = Path(PATH_DB)
    with path.open("w", encoding="UTF-8") as f:
        json.dump(my_dict, f, indent=4, ensure_ascii=False)
        return True
    return False

def load_users_from_json() -> list[User]:
    """
    —Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    :param data:
    :return:
    """
    result = list()
    data = load_db()
    for level, user_dict in data.items():
        for id, name in user_dict.items():
            user = User(name, int(id), int(level))
            result.append(user)
    return result

class Logger:
    __users = list()
    __users_log = list()

    def __init__(self):
        self.__users = load_users_from_json()

    def authorize(self, name: str, id: int):
        user_log = User(name, id)
        print(self.__users)
        for user in self.__users:
            if user_log == user:
                user_log.level = user.level
                self.__users_log.append(user_log)
                return user_log
        return False

    def add_user_db(self, my_user: User, other: User):
        if other < my_user:
            raise AccesError(f"—É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {other.level} –º–µ–Ω—å—à–µ –º–æ–µ–≥–æ —É—Ä–æ–≤–Ω—è {my_user.level}")
        else:
            data = load_db()
            if other.level in map(int, data.keys()):
                data[other.level][other.id] = other.name
            else:
                data[other.level] = {other.id: other.name}
            save_db(data)

if __name__ == "__main__":
    user_2 = User("–ú–∏—Ö–∞–∏–ª",12,6)
    loging = Logger()
    user = loging.authorize("–ú–∏—Ö–∞–∏–ª",1)
    print(user)