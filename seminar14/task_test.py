# üìå –ù–∞ —Å–µ–º–∏–Ω–∞—Ä–µ 13 –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–∏–º—è, id, —É—Ä–æ–≤–µ–Ω—å)
# üìå –ù–∞–ø–∏—à–∏—Ç–µ 3-7 —Ç–µ—Å—Ç–æ–≤ pytest (–∏–ª–∏ unittest –Ω–∞ –≤–∞—à –≤—ã–±–æ—Ä) –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
# üìå –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã

import pytest
from user import User, Logger, save_db, AccesError

@pytest.fixture
def data_users():
    """
    –∏—Å—Ö–æ–¥–Ω–∞—è –±–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    :return:
    """
    users_dict = {1: {0: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"},
            6: {
                12: "–ú–∏—Ö–∞–∏–ª",
                11: "–í–æ–≤–∞"
            },
            5: {
                2: "–Æ—Ä–∏–π",
                4: "–ù–∏–∫–æ–ª–∞–π"
            },
            4: {
                3: "–¶–∏–ª—è"
            },
            }
    save_db(users_dict)

@pytest.fixture
def god_user():
    return User("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", 0, 1)

@pytest.fixture
def good_user():
    return User("–í–æ–≤–∞", 11, 6)

@pytest.fixture
def bad_user():
    return User("–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", 1, 3)

def test_bad_create_user(capfd):
    """
    —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—à–∏–±–∫–æ–π –≤ –∏–º–µ–Ω–∏
    :param capfd: —Ñ–∏–∫—Å—Ç—É—Ä–∞ (capture Ô¨Åle descriptors)
    :return:
    """
    User("213sd", 3, 3)
    captured = capfd.readouterr()
    assert captured.out == '–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–∞\n'

def test_create_user(good_user):
    """
    —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param good_user: –∏–º–µ—é—â–∏–π—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –±–∞–∑—ã
    :return:
    """
    assert User(good_user.name, good_user.id, good_user.level) == good_user

def test_good_autorized(data_users, good_user):
    """
    —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    :param data_users: –±–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    :param good_user: –∏–º–µ—é—â–∏–π—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –±–∞–∑—ã
    :return:
    """
    loging = Logger()
    assert good_user == loging.authorize(good_user.name, good_user.id)

def test_bad_autorized(data_users,bad_user):
    """
    —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    :param data_users: –±–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    :param bad_user: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å–∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ
    :return:
    """
    loging = Logger()
    assert None == loging.authorize(bad_user.name, bad_user.id)

def test_bad_add_user(capfd, data_users, good_user, god_user):
    """
    —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
    :param data_users: –±–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    :param good_user: –∏–º–µ—é—â–∏–π—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    :return:
    """
    loging = Logger()
    user = loging.authorize(god_user.name, god_user.id)
    loging.add_user_db(user, good_user)
    captured = capfd.readouterr()
    assert captured.out == f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä {good_user.id} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.\n"

def test_not_acces_add_user(data_users, bad_user, good_user):
    """
    —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–µ–Ω—å—à–∏–º —É—Ä–æ–≤–Ω–µ–º –¥–æ—Å—Ç—É–ø–∞
    :param data_users: –±–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    :param bad_user: –¥–æ–±–∞–≤–ª—è–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –º–µ–Ω—å—à–∏–º —É—Ä–æ–≤–Ω–µ–º
    :param good_user: –∏–º–µ—é—â–∏–π—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ —Å –±–æ–ª—å—à–∏–º —É—Ä–æ–≤–Ω–µ–º
    :return:
    """
    loging = Logger()
    user = loging.authorize(good_user.name, good_user.id)
    with pytest.raises(AccesError, match=f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫: –£—Ä–æ–≤–µ–Ω—å –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {bad_user.level} –º–µ–Ω—å—à–µ –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è {user.level}"):
        loging.add_user_db(user, bad_user)

def test_bad_id_add_user(capfd, data_users, good_user):
    """
    —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
    :param data_users: –±–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    :param good_user: –∏–º–µ—é—â–∏–π—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ

    :return:
    """
    loging = Logger()
    user = loging.authorize("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", 0)
    loging.add_user_db(user, good_user)
    captured = capfd.readouterr()
    assert captured.out == f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä {good_user.id} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.\n"

if __name__ == '__main__':
    pytest.main(['-v'])